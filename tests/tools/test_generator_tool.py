import sys
from typing import Dict, Optional, Union
import time

from qwen_agent.agents import Assistant
from qwen_agent.tools.base import BaseTool, register_tool
@register_tool('generator_tool')
class MyGenerator(BaseTool):
    description = 'generator demo'
    parameters = [{
        'name': 'response',
        'type': 'string',
        'description': "输入“这是由生成器工具生成的响应”",
        'required': True
    }]
    def call(self, params: Union[str, dict], **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        print(params)
        params = self._verify_json_format_args(params)

        user_input_address = params["response"]
        def generator_func(user_input_address):
            return_str = ""
            for word in user_input_address:
                time.sleep(0.5)
                return_str += word
                yield return_str
        return generator_func(user_input_address)

def test():
    # tool = MyGenerator()

    # res = tool.call()
    # print(res)

    llm_cfg_oai = {
        'model_type': 'qwenvl_oai',
        'model': 'qwen-vl-max-latest',
        'model_server': "https://dashscope.aliyuncs.com/compatible-mode/v1",
        'api_key': "your_key",
        "generate_cfg": {
            "temperature": 0.7,
            "top_p": 0.8,
            "top_k": 50
        },
    }
    messages = [{'role': 'user', 'content': "调用generator_tool函数试试"}]
    tools = ['generator_tool']  # `code_interpreter` is a built-in tool for executing code.
    bot = Assistant(llm=llm_cfg_oai,
                    system_message=None,
                    function_list=tools)
    for response in bot.run(messages=messages, stream=True):
        print(response)
    
if __name__ == '__main__':
    test()
